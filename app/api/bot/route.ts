import { config } from '@/app/config';
import { NextResponse } from 'next/server';
import { Telegraf } from 'telegraf';

const bot = new Telegraf("7665933078:AAEk1IIIAafXQGki6i9tejLv4BBQ8MqWLuc");

bot.on('message', (ctx) => {
  /*ctx.sendInvoice({
    title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ üåü",
    description: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–æ—Ç–µ –∑–≤—ë–∑–¥–∞–º–∏ ‚≠ê",
    start_parameter: "top_up",
    currency: "XTR",
    prices: [{ label: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", amount: 10 }],
    payload: JSON.stringify({ data: "top_up" }),
    provider_token: "7665933078:AAEk1IIIAafXQGki6i9tejLv4BBQ8MqWLuc",
  });*/
  if (!("text" in ctx.message)) return;
  const msg = ctx.message.text;
  const senderId = ctx.message.from.id;
  const senderName = `${ctx.message.from.first_name}${ctx.message.from.first_name ? " " : ""}${ctx.message.from.last_name}`;
  switch (msg) {
    case "/start":
      ctx.reply(`‚≠ê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞ <b>StarsHub</b>!\n<a href='tg://openmessage?user_id=${senderId}'>${senderName}</a>, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üéâ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", url: config.webAppUrl }],
          ],
        },
        parse_mode: "HTML",
      });
  }
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    await bot.handleUpdate(body);
    return NextResponse.json({ status: 'ok' });
  } catch (err) {
    console.error(err);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export const dynamic = 'force-dynamic'; // –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤