import { config } from "@/app/config";
import { createClient } from "@supabase/supabase-js";
import { NextResponse } from "next/server";
import { Markup, Telegraf } from "telegraf";

const bot = new Telegraf("8270325718:AAFfL73Yy6cpOO-WEFwys-qnb7t5kA_qVmE");

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);
declare global {
  interface Context {
    message: {
      text: string;
      reply_to_message?: {
        from: {
          id: number;
        };
        forward_origin?: {
          message_id: number;
        };
      };
    };
  }
}

const getLudkaButtons = async () => {
  const { data: row, error } = await supabase
    .from("users")
    .select("*")
    .eq("tgId", 1)
    .single();

  return Markup.inlineKeyboard([
    [Markup.button.callback("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ö°", "showSettings")],
    [
      Markup.button.callback("7Ô∏è‚É£", "ludka 7Ô∏è‚É£"),
      Markup.button.callback("üçã", "ludka üçã"),
      Markup.button.callback("üçá", "ludka üçá"),
      Markup.button.callback("BAR", "ludka BAR"),
    ],
    [
      Markup.button.callback("‚ûñ", "minuswinners"),
      Markup.button.callback(
        `${row.ludka.winners !== 1000 ? row.ludka.winners : "‚àû"} üèÜ`,
        "showwinners"
      ),
      Markup.button.callback("‚ûï", "pluswinners"),
    ],
    [
      Markup.button.callback("‚ûñ", "minusrequiredTimes"),
      Markup.button.callback(
        `${row.ludka.requiredTimes} üî¢`,
        "showrequiredTimes"
      ),
      Markup.button.callback("‚ûï", "plusrequiredTimes"),
    ],
    [
      Markup.button.callback("‚ûñ", "minusrequiredRow"),
      Markup.button.callback(`${row.ludka.requiredRow} üíØ`, "showrequiredRow"),
      Markup.button.callback("‚ûï", "plusrequiredRow"),
    ],
    [Markup.button.callback("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—É–¥–∫—É üõë", "stopLudka")],
  ]);
};

const getLudkaMessage = async () => {
  const { data: row, error } = await supabase
    .from("users")
    .select("*")
    .eq("tgId", 1)
    .single();
  return `‚úÖ –õ—É–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!\n<blockquote expandable><b>üîó –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n<i>–¶–µ–ª—å:</i> ${row.ludka.neededComb}${row.ludka.neededComb}${row.ludka.neededComb} üé∞\n<i>üéä –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</i> ${row.ludka.winners}\n<i>–ù–∞–¥–æ –≤—ã–±–∏—Ç—å (—Ä–∞–∑):</i> ${row.ludka.requiredTimes} üóù\n<i>üí™ –ù–∞–¥–æ –≤—ã–±–∏—Ç—å (–ø–æ–¥—Ä—è–¥):</i> ${row.ludka.requiredRow}</blockquote>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª—É–¥–∫–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ! ‚öô\n\n<blockquote expandable><b>–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚ùï</b>\n<i>7Ô∏è‚É£, üçã, üçá, BAR:</i> –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –ª—É–¥–∫–∏\n<i>üèÜ:</i> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n<i>üî¢:</i> –ù—É–∂–Ω–æ–µ –¥–ª—è –ø–æ–±–µ–¥—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π\n<i>üíØ:</i> –ù—É–∂–Ω–æ–µ –¥–ª—è –ø–æ–±–µ–¥—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π <b>–ø–æ–¥—Ä—è–¥</b></blockquote>`;
};

const sendResults = async (finalText: string) => {
  try {
    bot.telegram.sendMessage(7441988500, finalText, {
      parse_mode: "HTML",
    }); /* !! */
    /*bot.telegram.sendMessage(6233759034, finalText, {
      parse_mode: "HTML",
    });*/
    const { data: row, error } = await supabase
      .from("users")
      .select("*")
      .eq("tgId", 1)
      .single();
    await bot.telegram.sendMessage(
      row.ludka.chatId,
      finalText,
      {
        parse_mode: "HTML",
        reply_parameters: {
          message_id: row.ludka.msgId,
        }
      }
    );
  } catch (error: any) {
    bot.telegram.sendMessage(7441988500, `Error occurred while processing message:\n${error.stack || error.message}`);
  }
};

bot.action("showSettings", async (ctx) => {
  ctx.editMessageText(await getLudkaMessage(), {
    parse_mode: "HTML",
    reply_markup: (await getLudkaButtons()).reply_markup,
  });
  ctx.answerCbQuery("‚úÖ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã!");
});

bot.action("stopLudka", async (ctx) => {
  const admins = [7441988500, 6233759034, 7177688298];
  if (!admins.includes(ctx.callbackQuery.from.id)) {
    ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }
  const { data: row, error } = await supabase
    .from("users")
    .select("*")
    .eq("tgId", 1)
    .single();
  row.ludka.isActive = false;
  row.ludka.doneUsers = {};
  row.ludka.currentWinners = [];
  await supabase
    .from("users")
    .update({
      ludka: row.ludka,
    })
    .eq("tgId", 1);
  const currentWinners = row.ludka.currentWinners;
  let finalText = `üèÜ –õ—É–¥–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n`;
  await Promise.all(
    currentWinners.map(async (id: any) => {
      finalText += `<a href="tg://openmessage?user_id=${id}">${id}</a>\n`;
    })
  );
  sendResults(finalText);
  ctx.editMessageText("üìõ –õ—É–¥–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!", {
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [Markup.button.callback("‚úÖ –í–∫–ª—é—á–∏—Ç—å –ª—É–¥–∫—É", "startLudka")],
      ],
    },
  });
  ctx.answerCbQuery("‚úÖ –õ—É–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", {
    show_alert: false,
    cache_time: 0,
  });
});

bot.action("startLudka", async (ctx) => {
  const admins = [7441988500, 6233759034, 7177688298];
  if (!admins.includes(ctx.callbackQuery.from.id)) {
    ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }

  const { data: row, error } = await supabase
    .from("users")
    .select("*")
    .eq("tgId", 1)
    .single();
  row.ludka.isActive = true;
  await supabase
    .from("users")
    .update({
      ludka: row.ludka,
    })
    .eq("tgId", 1);
  ctx.editMessageText(await getLudkaMessage(), {
    parse_mode: "HTML",
    reply_markup: (await getLudkaButtons()).reply_markup,
  });
  ctx.answerCbQuery("‚úÖ –õ—É–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!", {
    show_alert: false,
    cache_time: 0,
  });
});

bot.action(/^ludka\s+(?:7Ô∏è‚É£|üçã|üçá|BAR)$/, async (ctx) => {
  const admins = [7441988500, 6233759034, 7177688298];
  if (!admins.includes(ctx.callbackQuery.from.id)) {
    ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }
  const { data: row, error } = await supabase
    .from("users")
    .select("*")
    .eq("tgId", 1)
    .single();
  if (error) {
    ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –ª—É–¥–∫–∏", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }
  row.ludka.neededComb = ctx.match[0].split(" ")[1];
  await supabase
    .from("users")
    .update({
      ludka: row.ludka,
    })
    .eq("tgId", 1);
  ctx.answerCbQuery(
    `‚úÖ –¶–µ–ª—å –ª—É–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${row.ludka.neededComb}${row.ludka.neededComb}${row.ludka.neededComb}`,
    {
      show_alert: false,
      cache_time: 0,
    }
  );
  ctx.editMessageReplyMarkup((await getLudkaButtons()).reply_markup);
  return;
});

bot.action(/^show(?:winners|requiredTimes|requiredRow)$/, async (ctx) => {
  const admins = [7441988500, 6233759034, 7177688298];
  if (!admins.includes(ctx.callbackQuery.from.id)) {
    ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }
  const { data: row, error } = await supabase
    .from("users")
    .select("*")
    .eq("tgId", 1)
    .single();
  if (error) {
    ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }
  ctx.answerCbQuery(
    `‚öô –¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: ${
      row.ludka[ctx.match[0].slice(4)] !== 1000
        ? row.ludka[ctx.match[0].slice(4)]
        : "‚àû"
    }`,
    {
      show_alert: true,
      cache_time: 0,
    }
  );
});

bot.action(/^plus(?:winners|requiredTimes|requiredRow)$/, async (ctx) => {
  const admins = [7441988500, 6233759034, 7177688298];
  if (!admins.includes(ctx.callbackQuery.from.id)) {
    ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }
  const { data: row, error } = await supabase
    .from("users")
    .select("*")
    .eq("tgId", 1)
    .single();
  if (error) {
    ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }
  if (
    ctx.match[0].slice(4) == "winners" &&
    row.ludka[ctx.match[0].slice(4)] == 1000
  ) {
    row.ludka[ctx.match[0].slice(4)] = 1;
  } else {
    row.ludka[ctx.match[0].slice(4)] += 1;
  }
  await supabase
    .from("users")
    .update({
      ludka: row.ludka,
    })
    .eq("tgId", 1);
  ctx.answerCbQuery(
    `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${
      row.ludka[ctx.match[0].slice(4)] !== 1000
        ? row.ludka[ctx.match[0].slice(4)]
        : "‚àû"
    }`,
    {
      show_alert: false,
      cache_time: 0,
    }
  );
  ctx.editMessageReplyMarkup((await getLudkaButtons()).reply_markup);
});

bot.action(/^minus(?:winners|requiredTimes|requiredRow)$/, async (ctx) => {
  const admins = [7441988500, 6233759034, 7177688298];
  if (!admins.includes(ctx.callbackQuery.from.id)) {
    ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
  const { data: row, error } = await supabase
    .from("users")
    .select("*")
    .eq("tgId", 1)
    .single();

  if (error) {
    ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }

  const settingName = ctx.match[0].slice(5);
  const currentValue = row.ludka[settingName];

  if (typeof currentValue !== "number") {
    ctx.answerCbQuery("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (settingName !== "winners" && currentValue <= 1) {
    await ctx.answerCbQuery("‚ùå –î–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1!", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }

  const updatedLudka = { ...row.ludka };

  if (settingName === "winners") {
    if (currentValue === 1000) {
      updatedLudka.winners = 1;
    } else if (currentValue === 1) {
      updatedLudka.winners = 1000;
    } else {
      updatedLudka.winners -= 1;
    }
  } else {
    updatedLudka[settingName] -= 1;
  }

  const { error: updateError } = await supabase
    .from("users")
    .update({ ludka: updatedLudka })
    .eq("tgId", 1);

  if (updateError) {
    ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π", {
      show_alert: true,
      cache_time: 0,
    });
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
  ctx.answerCbQuery(
    `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${
      updatedLudka[settingName] !== 1000 ? updatedLudka[settingName] : "‚àû"
    }`,
    {
      show_alert: false,
      cache_time: 0,
    }
  );
  ctx.editMessageReplyMarkup((await getLudkaButtons()).reply_markup);
});

bot.on("message", async (ctx) => {
  try {
    const chats = [-1002608961312, -1002560347854, -1002674341448];
    if (
      !chats.includes(ctx.message.chat.id) &&
      ctx.message.chat.id !== ctx.message.from.id
    ) {
      await bot.telegram.leaveChat(ctx.message.chat.id);
      return;
    }
    const { data: row, error } = await supabase
      .from("users")
      .select("*")
      .eq("tgId", 1)
      .single();
    if (
      "dice" in ctx.message &&
      !("forward_origin" in ctx.message) &&
      row.ludka.isActive &&
      ctx.message.reply_to_message?.from?.id !== 777000
    ) {
      const phrases = [
        "–ë—Ä–æ–æ, —è —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç –æ –ª—É–¥–∫–µ üò¢ (–Ω—É –∏–ª–∏ –Ω–µ –∏–≥—Ä–∞—Ç—å –≤ —ç—Ç–æ –¥–µ—Ä—å–º–æ)",
        "–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –∏ –≤—ã–∏–≥—Ä–∞–ª, –Ω–æ –º—ã —Ç–µ–±–µ –Ω–µ –≤—ã–¥–∞–¥–∏–º –ø—Ä–∏–∑, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –∫—Ä—É—Ç–∏—à—å –Ω–µ –ø–æ–¥ –ø–æ—Å—Ç–æ–º üò©",
        "ü§¨ –¢—ã —á–∏—Ç–∞—Ç—å —Ä–∞–∑—É—á–∏–ª—Å—è? –ö–†–£–¢–ò–¢–¨ –¢–û–õ–¨–ö–û –í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–•",
        "–ê –Ω—É –±—ã—Å—Ç—Ä–æ –ø–æ—à—ë–ª –∫—Ä—É—Ç–∏—Ç—å –ø–æ–¥ –ø–æ—Å—Ç–æ–º! üòà",
        "üí¢ –û–ø—è—Ç—å –º–∏–º–æ! –ù–∞–∂–∏–º–∞–π —Ç–∞–º, –≥–¥–µ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –ª—é–¥–∏ - –ø–æ–¥ –ø–æ—Å—Ç–æ–º!",
        "–¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ –¥—É–º–∞–µ—à—å, —á—Ç–æ —Ç–∞–∫ –≤—ã–∏–≥—Ä–∞–µ—à—å? –ü–æ–¥ –ø–æ—Å—Ç–æ–º –∫—Ä—É—Ç–∏, –¥—Ä—É–∂–æ–∫! üßê",
        "ü§° –ö–ª–æ—É–Ω–∞–¥–∞! –ü—Ä–∏–∑ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö –∫—Ä—É—Ç–∏—Ç!",
        "–ú–Ω–µ –±–æ–ª—å–Ω–æ –≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ç—ã —Ç—ã–∫–∞–µ—à—å –Ω–µ —Ç—É–¥–∞... –ü–æ–¥ –ø–æ—Å—Ç–æ–º –∂–µ! üíî",
        "üëÆ‚Äç‚ôÇÔ∏è –ü–æ–ª–∏—Ü–∏—è –ª—É–¥–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ! –≠—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –∫—Ä—É—Ç–∏—Ç—å –ø–æ–¥ –ø–æ—Å—Ç–æ–º!",
        "üôÖ‚Äç‚ôÇÔ∏è –ù–µ-–Ω–µ-–Ω–µ, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç! –ë–µ–≥–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç!",
        "–ë–£–ú! –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ–∏–≥—Ä–∞–ª –±–∏—Ç–≤—É —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º! –ö–æ–º–º–µ–Ω—Ç—ã –∏—â–∏! üí£",
        "–≠—Ö, –µ—Å–ª–∏ –±—ã —Ç—ã —Ç–∞–∫ –∂–µ –º–µ—Ç–∫–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö —Ç—ã–∫–∞–ª, –∫–∞–∫ –º–∏–º–æ –Ω–∏—Ö... üé≤",
        "ü§ñ –±–∏–ø-–±—É–ø-–æ—à–∏–±–∫–∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: –ª—É–¥–∫–∞ –≤–Ω–µ –∑–æ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–æ–≤!",
        "üß® –ë–∞—Ö! –¢–≤–æ–π —à–∞–Ω—Å –≤–∑–æ—Ä–≤–∞–ª—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –Ω–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö!",
        "–û–π, –≤—Å—ë... –û–ø—è—Ç—å –Ω–µ —Ç–∞–º –∂–º—ë—à—å! –ß–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞, –±—Ä–∞—Ç–∏–∫! ü§¶‚Äç‚ôÇÔ∏è",
        "üé™ –¶–∏—Ä–∫! –ì–¥–µ —Ç—ã –≤–∏–¥–∏—à—å —Ç—É—Ç –ø–æ—Å—Ç? –í –∫–æ–º–º–µ–Ω—Ç–∞—Ö –∫—Ä—É—Ç–∏!",
        "üßü‚Äç‚ôÇÔ∏è –¢—ã –∫–∞–∫ –∑–æ–º–±–∏ - —Ö–æ–¥–∏—à—å –∏ —Ç—ã–∫–∞–µ—à—å –∫—É–¥–∞ –ø–æ–ø–∞–ª–æ! –í –∫–æ–º–º–µ–Ω—Ç—ã –∏–¥–∏!",
        "üö´ –°—Ç–æ–ø-—Å—Ç–æ–ø-—Å—Ç–æ–ø! –ù–µ –≤–∏–¥–∏—à—å, –≥–¥–µ –≤—Å–µ –∫—Ä—É—Ç—è—Ç? –ü–æ–¥ –ø–æ—Å—Ç–æ–º!",
      ];
      ctx.reply(phrases[Math.floor(Math.random() * phrases.length)], {
        reply_parameters: {
          message_id: ctx.message.message_id,
        },
      });
      return;
    }
    const msg = (ctx as Context).message.text;
    const senderId = ctx.message.from.id;
    const senderName = `${ctx.message.from.first_name ?? ""}${
      ctx.message.from.first_name && ctx.message.from.last_name ? " " : ""
    }${ctx.message.from.last_name ?? ""}`;
    const admins = [7441988500, 6233759034, 7177688298];

    if (admins.includes(senderId)) {
      switch (msg) {
        case "/ludka":
        case "/–ª—É–¥–∫–∞":
        case ".–ª—É–¥–∫–∞":
        case "/ludka@StarzHubBot":
          ctx.reply(await getLudkaMessage(), {
            reply_markup: (await getLudkaButtons()).reply_markup,
            parse_mode: "HTML",
            reply_parameters: {
              message_id: ctx.message.message_id,
            },
          });
          ctx.replyWithDice({
            emoji: "üé∞",
            reply_parameters: {
              message_id: ctx.message?.message_id,
            },
          });
          let msgId = row.ludka.msgId;
          let chatId = row.ludka.chatId;
          if (
            "reply_to_message" in ctx.message &&
            ctx.message.reply_to_message?.sender_chat?.type === "channel" &&
            "forward_origin" in ctx.message.reply_to_message &&
            ctx.message.reply_to_message.forward_origin !== undefined &&
            "message_id" in ctx.message.reply_to_message.forward_origin
          ) {
            msgId = ctx.message.reply_to_message.forward_origin?.message_id;
            chatId = ctx.message.reply_to_message.sender_chat.id;
          }
          await supabase
            .from("users")
            .update({
              ludka: {
                isActive: true,
                winners: row.ludka.winners,
                doneUsers: row.ludka.doneUsers,
                currentWinners: row.ludka.currentWinners,
                requiredTimes: row.ludka.requiredTimes,
                requiredRow: row.ludka.requiredRow,
                neededComb: row.ludka.neededComb,
                msgId: await msgId,
                chatId: await chatId,
              },
            })
            .eq("tgId", 1);
          return;

        case "/stop_ludka":
        case "-–ª—É–¥–∫–∞":
        case "/stop_ludka@StarzHubBot":
          ctx.reply("‚ùå –õ—É–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", {
            reply_parameters: {
              message_id: ctx.message.message_id,
            },
          });
          const currentWinners = row.ludka.currentWinners;
          let finalText = `üèÜ –õ—É–¥–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n`;
          await Promise.all(
            currentWinners.map(async (id: any) => {
              finalText += `<a href="tg://openmessage?user_id=${id}">${id}</a>\n`;
            })
          );
          await sendResults(finalText);
          await supabase
            .from("users")
            .update({
              ludka: {
                isActive: false,
                winners: row.ludka.winners,
                doneUsers: {},
                currentWinners: [],
                requiredTimes: row.ludka.requiredTimes,
                requiredRow: row.ludka.requiredRow,
                neededComb: row.ludka.neededComb,
                msgId: row.ludka.msgId,
                chatId: row.ludka.chatId,
              },
            })
            .eq("tgId", 1);
          return;
      }
    }

    if (!row.ludka.doneUsers[`${senderId}`]) {
      row.ludka.doneUsers[`${senderId}`] = { lastWins: 0, times: 0 };
    }
    await supabase.from("users").update(row).eq("tgId", 1);
    let extraCheck =
      (await row.ludka.doneUsers[`${senderId}`].lastWins) + 1 >=
      row.ludka.requiredRow;
    const neededValue =
      row.ludka.neededComb === "7Ô∏è‚É£"
        ? 64
        : row.ludka.neededComb === "üçã"
        ? 43
        : row.ludka.neededComb === "üçá"
        ? 22
        : 1;
    if (
      row.ludka.isActive &&
      senderId !== ctx.message.chat.id &&
      "reply_to_message" in ctx.message &&
      ctx.message.reply_to_message?.from?.id === 777000 &&
      "dice" in ctx.message &&
      (ctx.message.dice as any).value === neededValue &&
      row.ludka.winners === row.ludka.currentWinners.length + 1
    ) {
      try {
        row.ludka.doneUsers = row.ludka.doneUsers || {};

        if (!row.ludka.doneUsers[`${senderId}`]) {
          row.ludka.doneUsers[`${senderId}`] = { lastWins: 0, times: 0 };
        }

        const userData = row.ludka.doneUsers[`${senderId}`];

        if (
          (row.ludka.requiredTimes >= (await userData).times + 1 &&
            row.ludka.requiredRow == 1) ||
          (extraCheck && row.ludka.requiredRow > 1)
        ) {
          await ctx.reply("‚úÖ –£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!", {
            reply_parameters: {
              message_id: ctx.message.message_id,
            },
          });

          const currentWinners = [...row.ludka.currentWinners, senderId];
          let finalText = `üèÜ –õ—É–¥–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n`;

          await Promise.all(
            currentWinners.map(async (id) => {
              finalText += `<a href="tg://openmessage?user_id=${id}">${id}</a>\n`;
            })
          );

          await sendResults(finalText);
          row.ludka.isActive = false;
          row.ludka.doneUsers = {};
          row.ludka.currentWinners = [];

          await supabase
            .from("users")
            .update({
              ludka: row.ludka,
            })
            .eq("tgId", 1);
        } else if (
          row.ludka.requiredTimes != (await userData).times + 1 &&
          row.ludka.requiredRow === 1
        ) {
          const remainingAttempts =
            row.ludka.requiredTimes - (await userData).times - 1;

          await ctx.reply(
            `üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±–∏–ª–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, –ù–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–±–∏—Ç—å —ç—Ç–æ –∂–µ –µ—â—ë ${remainingAttempts} —Ä–∞–∑!`,
            {
              reply_parameters: {
                message_id: ctx.message.message_id,
              },
            }
          );

          row.ludka.doneUsers[`${senderId}`] = {
            lastWins: row.ludka.doneUsers[`${senderId}`].lastWins + 1,
            times: row.ludka.doneUsers[`${senderId}`].times + 1,
          };

          await supabase
            .from("users")
            .update({
              ludka: row.ludka,
            })
            .eq("tgId", 1);
        } else if (!extraCheck && row.ludka.requiredRow > 1) {
          const remainingAttempts =
            row.ludka.requiredRow - (await userData).lastWins - 1;

          await ctx.reply(
            `üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±–∏–ª–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, –Ω–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–±–∏—Ç—å —ç—Ç–æ –∂–µ –µ—â—ë ${remainingAttempts} —Ä–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π!`,
            {
              reply_parameters: {
                message_id: ctx.message.message_id,
              },
            }
          );

          row.ludka.doneUsers[`${senderId}`] = {
            lastWins: row.ludka.doneUsers[`${senderId}`].lastWins + 1,
            times: row.ludka.doneUsers[`${senderId}`].times + 1,
          };

          await supabase
            .from("users")
            .update({
              ludka: row.ludka,
            })
            .eq("tgId", 1);
        } else {
          await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", {
            reply_parameters: {
              message_id: ctx.message.message_id,
            },
          });
        }

        await ctx.react("üéâ", true);

        const stickers = [
          "CAACAgIAAxkBAAEPBh9ohVdxJcsomD-tLwwG_1YlSUIktgAC6RkAAhZeKEimg5LObeZqozYE",
          "CAACAgIAAxkBAAEPBiBohVdxINYqfccrgJC_D8gtaQMCSAACqhgAAg9lCEoGzNzn0P2-0zYE",
          "CAACAgIAAxkBAAEO3bZoakWLtC2BLxtCz-44rPorOiyLTgACSgIAAladvQrJasZoYBh68DYE",
          "CAACAgIAAxkBAAEPBiJohVdxbYewkFW7Y_HBYinkcLV3FAAC_xoAAhaNgUkgU21P6dzWmzYE",
          "CAACAgEAAxkBAAEPBiNohVdxM1x7ygJxSV3JpOMZieJAZAACtAIAAs2j-UTxghF_qaLQVjYE",
          "CAACAgIAAxkBAAEPBbFohOwUueOz-QgyXd2t8EMHvvIR8AACyxsAAgPamEiwRqVGuLHqQzYE",
          "CAACAgIAAxkBAAEPB11ohqNJG_kaJr4LJbSyI6wm_P8AATgAAnwdAALlAzlLyEU_5iJrorg2BA",
        ];

        await ctx.replyWithSticker(
          stickers[Math.floor(Math.random() * stickers.length)],
          {
            reply_parameters: {
              message_id: ctx.message.message_id,
            },
          }
        );
      } catch (error: any) {
        console.error("Error in ludka handler:", error);
        try {
          await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`, {
            reply_parameters: {
              message_id: ctx.message.message_id,
            },
          });
        } catch (e) {
          console.error("Failed to send error message:", e);
        }
      }
    } else if (
      row.ludka.isActive &&
      senderId !== ctx.message.chat.id &&
      "reply_to_message" in ctx.message &&
      ctx.message.reply_to_message?.from?.id === 777000 &&
      "dice" in ctx.message &&
      (ctx.message.dice as any).value === neededValue &&
      row.ludka.winners !== row.ludka.currentWinners.length + 1
    ) {
      try {
        row.ludka.doneUsers = row.ludka.doneUsers || {};

        if (!row.ludka.doneUsers[`${senderId}`]) {
          row.ludka.doneUsers[`${senderId}`] = { lastWins: 0, times: 0 };
        }

        const userData = await row.ludka.doneUsers[`${senderId}`];

        if (row.ludka.requiredTimes == (await userData).times + 1 && extraCheck) {
          const remainingWinners =
            row.ludka.winners === 1000
              ? "‚àû"
              : row.ludka.winners - row.ludka.currentWinners.length - 1;

          await ctx.reply(
            `‚úÖ –£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!\nüèÜ –ï—â—ë –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç –±—ã—Ç—å: ${remainingWinners}`,
            {
              reply_parameters: {
                message_id: ctx.message.message_id,
              },
            }
          );

          row.ludka.currentWinners.push(senderId);
          row.ludka.doneUsers[`${senderId}`] = {
            lastWins: row.ludka.doneUsers[`${senderId}`].lastWins + 1,
            times: row.ludka.doneUsers[`${senderId}`].times + 1,
          }
          await supabase
            .from("users")
            .update({
              ludka: row.ludka,
            })
            .eq("tgId", 1);
        } else if (
          row.ludka.requiredTimes != (await userData).times + 1 &&
          row.ludka.requiredRow === 1
        ) {
          const remainingAttempts =
            row.ludka.requiredTimes - (await userData).times + 1;

          await ctx.reply(
            `üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±–∏–ª–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, –ù–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–±–∏—Ç—å —ç—Ç–æ –∂–µ –µ—â—ë ${remainingAttempts} —Ä–∞–∑!`,
            {
              reply_parameters: {
                message_id: ctx.message.message_id,
              },
            }
          );

          row.ludka.doneUsers[`${senderId}`] = {
            lastWins: row.ludka.doneUsers[`${senderId}`].lastWins + 1,
            times: row.ludka.doneUsers[`${senderId}`].times + 1,
          };

          await supabase
            .from("users")
            .update({
              ludka: row.ludka,
            })
            .eq("tgId", 1);
        } else if (!extraCheck && row.ludka.requiredRow > 1) {
          const remainingAttempts =
            row.ludka.requiredRow - (await userData).lastWins - 1;

          await ctx.reply(
            `üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±–∏–ª–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, –Ω–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –≤—ã–±–∏—Ç—å —ç—Ç–æ –∂–µ –µ—â—ë ${remainingAttempts} —Ä–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π!`,
            {
              reply_parameters: {
                message_id: ctx.message.message_id,
              },
            }
          );

          row.ludka.doneUsers[`${senderId}`] = {
            lastWins: row.ludka.doneUsers[`${senderId}`].lastWins + 1,
            times: row.ludka.doneUsers[`${senderId}`].times + 1,
          };

          await supabase
            .from("users")
            .update({
              ludka: row.ludka,
            })
            .eq("tgId", 1);
        }

        await ctx.react("üéâ", true);

        const stickers = [
          "CAACAgIAAxkBAAEPBh9ohVdxJcsomD-tLwwG_1YlSUIktgAC6RkAAhZeKEimg5LObeZqozYE",
          "CAACAgIAAxkBAAEPBiBohVdxINYqfccrgJC_D8gtaQMCSAACqhgAAg9lCEoGzNzn0P2-0zYE",
          "CAACAgIAAxkBAAEO3bZoakWLtC2BLxtCz-44rPorOiyLTgACSgIAAladvQrJasZoYBh68DYE",
          "CAACAgIAAxkBAAEPBiJohVdxbYewkFW7Y_HBYinkcLV3FAAC_xoAAhaNgUkgU21P6dzWmzYE",
          "CAACAgEAAxkBAAEPBiNohVdxM1x7ygJxSV3JpOMZieJAZAACtAIAAs2j-UTxghF_qaLQVjYE",
          "CAACAgIAAxkBAAEPBbFohOwUueOz-QgyXd2t8EMHvvIR8AACyxsAAgPamEiwRqVGuLHqQzYE",
          "CAACAgIAAxkBAAEPB11ohqNJG_kaJr4LJbSyI6wm_P8AATgAAnwdAALlAzlLyEU_5iJrorg2BA",
        ];

        await ctx.replyWithSticker(
          stickers[Math.floor(Math.random() * stickers.length)],
          {
            reply_parameters: {
              message_id: ctx.message.message_id,
            },
          }
        );
      } catch (error: any) {
        console.error("Error in ludka handler (second block):", error);
        try {
          await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`, {
            reply_parameters: {
              message_id: ctx.message.message_id,
            },
          });
        } catch (e) {
          console.error("Failed to send error message:", e);
        }
      }
    } else if (
      row.ludka.isActive &&
      senderId !== ctx.message.chat.id &&
      "reply_to_message" in ctx.message &&
      ctx.message.reply_to_message?.from?.id === 777000 &&
      "dice" in ctx.message &&
      (ctx.message.dice as any).value !== neededValue &&
      row.ludka.doneUsers[`${senderId}`].lastWins > 0
    ) {
      if (row.ludka.requiredRow > 1) {
        ctx.reply("‚ùå –í–∞—à —Å—Ç—Ä–∏–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è!", {
          reply_parameters: {
            message_id: ctx.message.message_id,
          },
        });
      }
      row.ludka.doneUsers[`${senderId}`] = {
        times: row.ludka.doneUsers[`${senderId}`].times,
        lastWins: 0,
      };
      await supabase
        .from("users")
        .update({
          ludka: row.ludka,
        })
        .eq("tgId", 1);
    }

    switch (msg) {
      case "/start":
        ctx.reply(
          `‚≠ê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞ <b>StarsHub</b>!\n<a href='tg://openmessage?user_id=${senderId}'>${senderName}</a>, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üéâ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", url: config.webAppUrl }],
              ],
            },
            parse_mode: "HTML",
          }
        );
        return;

      case "/ludka":
      case "-–ª—É–¥–∫–∞":
      case ".–ª—É–¥–∫–∞":
      case "/–ª—É–¥–∫–∞":
      case "/ludka@StarzHubBot":
      case "/stop_ludka":
      case "/stop_ludka@StarzHubBot":
        ctx.reply(
          "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!",
          {
            reply_parameters: {
              message_id: ctx.message.message_id,
            },
          }
        );
        return;
    }

    if (msg && msg.startsWith("/top_up ")) {
      try {
        const amount = parseInt(msg.slice("/top_up ".length));
        if (isNaN(amount)) {
          ctx.reply(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
          );
          return;
        }
        ctx.sendInvoice({
          title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ üåü",
          description: "‚≠ê –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤—ë–∑–¥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
          start_parameter: "top_up",
          currency: "XTR",
          prices: [{ label: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", amount: amount }],
          payload: JSON.stringify({ data: "top_up" }),
          provider_token: "8270325718:AAFfL73Yy6cpOO-WEFwys-qnb7t5kA_qVmE",
        });
      } catch (error) {
        ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.");
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      bot.telegram.sendMessage(
        7441988500,
        `Error occurred while processing message:\n${
          error.stack || error.message
        }`
      );
    }
  }
});

export async function POST(req: Request) {
  try {
    const body = await req.json();
    await bot.handleUpdate(body);
    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error("Error:", error);
    return NextResponse.json({ error: "Internal error" }, { status: 500 });
  }
}

export const dynamic = "force-dynamic";
