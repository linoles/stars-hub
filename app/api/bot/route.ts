import { config } from "@/app/config";
import { createClient } from "@supabase/supabase-js";
import { NextResponse } from "next/server";
import { Markup, Telegraf } from "telegraf";

const bot = new Telegraf("8270325718:AAFfL73Yy6cpOO-WEFwys-qnb7t5kA_qVmE");

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

const getLudkaButtons = async () => {
  const { data: row, error } = await supabase
    .from("users")
    .select("*")
    .eq("tgId", 1)
    .single();

  return Markup.inlineKeyboard([
    [
      Markup.button.callback("7Ô∏è‚É£", "/ludka 7Ô∏è‚É£"),
      Markup.button.callback("üçã", "/ludka üçã"),
      Markup.button.callback("üçá", "/ludka üçá"),
      Markup.button.callback("BAR", "/ludka BAR"),
    ],
    [
      Markup.button.callback("‚ûñ", "minusWinner"),
      Markup.button.callback(`${row.ludka.winners} üèÜ`, "showWinners"),
      Markup.button.callback("‚ûï", "plusWinner"),
    ],
    [
      Markup.button.callback("‚ûñ", "minusRequiredTime"),
      Markup.button.callback(
        `${row.ludka.requiredTimes} üî¢`,
        "showRequiredTimes"
      ),
      Markup.button.callback("‚ûï", "plusRequiredTime"),
    ],
    [
      Markup.button.callback("‚ûñ", "minusRequiredRow"),
      Markup.button.callback(`${row.ludka.requiredRow} üíØ`, "showRequiredRow"),
      Markup.button.callback("‚ûï", "plusRequiredRow"),
    ],
  ]);
};

bot.on("message", async (ctx) => {
  if (!("text" in ctx.message)) return;
  const msg = ctx.message.text;
  const senderId = ctx.message.from.id;
  const senderName = `${ctx.message.from.first_name ?? ""}${
    ctx.message.from.first_name && ctx.message.from.last_name ? " " : ""
  }${ctx.message.from.last_name ?? ""}`;
  const admins = [7441988500, 6233759034, 7177688298];
  const { data: row, error } = await supabase
    .from("users")
    .select("*")
    .eq("tgId", 1)
    .single();

  if (admins.includes(senderId)) {
    switch (msg) {
      case "/ludka":
      case "/ludka@StarzHubBot":
        ctx.reply(
          "‚úÖ –õ—É–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª—É–¥–∫–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ! ‚öô",
          {
            reply_markup: (await getLudkaButtons()).reply_markup,
          }
        );
        await supabase.from("users").update({
          ludka: {
            isActive: true,
          },
        }).eq("tgId", 1);
        return;
    }
  }

  switch (msg) {
    case "/start":
      ctx.reply(
        `‚≠ê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞ <b>StarsHub</b>!\n<a href='tg://openmessage?user_id=${senderId}'>${senderName}</a>, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üéâ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", url: config.webAppUrl }],
            ],
          },
          parse_mode: "HTML",
        }
      );
  }

  if (msg.startsWith("/top_up ")) {
    try {
      const amount = parseInt(msg.slice("/top_up ".length));
      if (isNaN(amount)) {
        ctx.reply(
          "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        );
        return;
      }
      ctx.sendInvoice({
        title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ üåü",
        description: "‚≠ê –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤—ë–∑–¥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        start_parameter: "top_up",
        currency: "XTR",
        prices: [{ label: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", amount: amount }],
        payload: JSON.stringify({ data: "top_up" }),
        provider_token: "8270325718:AAFfL73Yy6cpOO-WEFwys-qnb7t5kA_qVmE",
      });
    } catch (error) {
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.");
    }
  }
});

export async function POST(req: Request) {
  try {
    const body = await req.json();
    await bot.handleUpdate(body);
    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error("Error:", error);
    return NextResponse.json({ error: "Internal error" }, { status: 500 });
  }
}

export const dynamic = "force-dynamic";
